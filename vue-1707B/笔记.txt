回顾:
  webpack 高级用法:
    优化 体积 速度

  今天:
    1: vue结合webpack 搭建一个完整的项目
    2: 封装一些常用的组件
       侧边栏 二级路由
       树组件
       拖拽组件
    3: 项目:(考试平台)
       配合  独立开发  学会百度


    目录分配
    常见的封装
    后台 : 后台的框架
    vuex:
    axios:二次封装

  1: git 回到某个版本
     git reset --hard ^HEAD
  2: webpack 优化点
     前缀 autoprefixer 代码优雅
     压缩 插件
     new TerserJSPlugin({}), new OptimizeCssAssetsPlugin({})
       production
     自带优化
     动态链接库  第三方 单独打包 cdn 上
     抽离公共代码
  3: 如何处理history刷新404的问题
     解决问题
     historyapifallback:

  4: webpack 处理js文件都需要哪些插件
     babel-loader
     @babel/core @babel/preset-env
     plugins: es7语法


如何处理history刷新404的问题
  webpack devServer 中加 historyApiFallback: true

图片的问题
什么也没配置
  img src   显示的效果 : src="[object Module]"

  解决办法:
    {
          test: /\.(png|jpg|gif)$/,
          use: [{
            loader: 'file-loader',
            options: {
              esModule: false
            }

          }]
        },

资源问题 404问题
  user/子路由 二级路由

  http://localhost:8080/main/home/bundle.ca3d99bc68.js
  http://localhost:8080/bundle.ca3d99bc68.js

  //二级路由资源文件请求404
   output: {
      filename: 'bundle.[hash:10].js',//打包的文件叫什么名字
      path: path.join(__dirname, '../dist'),
      publicPath: "/"//访问资源文件的时候 从根路径访问
    },


作业:
  1:搭建一个完整的脚手架
  2:导航栏自己完善
    左边 二级菜单 右边 二级路由的详情页
  3:宝宝说 : 图片 刷新解决一下
    明天晚上 全做完
    亮点:1 歌词
    下载:MP4  直接打开  百度
  配色网站 https://colorhunt.co/


回顾:
  较为完美的框架
    刷新404的问题
    静态资源
    图片
    options: {
      esModule: false
    }

  框架: pc
  第二个项目 PC端
    接口文档
    UI图
    开始--->最后  优化

  vue:最重要的东西  1:指令 2:组件  3:vuex  4:设计模式MVVM  4:spa
    vue的核心思想 : 数据驱动视图 M:数据 V View VM vue的实例  new Vue({代码})
    vuex: vue的仓库管理  A-->vuex -->B 没有行不行
      不要为了vuex而vuex 打包体积 代码分割 执行速度
      数据比较多 : vuex
      什么情况不需要 vuex : 数据没有太大关联

    spa:不是 模式
      h5新增的api history
      # hash

    指令: v-for  v-if  v-html  v-xxx 爽
    vue的核心

    最重要: 只有一个

    vue组件
      1.使用 所有的code都放在一个文件中 爆炸
        vue 4000行 恶心
        上传 拖拽



      2.面试
        面试官问vue的最多的是什么

        组件: 怎么封装组件
             步骤 弹框:  事件暴露  逻辑内置
             维护 上传
        生命周期 生命周期的区别
        原理

      3.职业规划
        高级工程师 源码 怎么设计的
        封装自己的组件库 npm 发个包 给别人用

  1:侧边栏组件
    1)在主页中实现
    2)组件用的时候 引过来就行了
    3)结合路由配置
    4)点击时候实现跳转



作业:
  1:宝宝说 全部完成 现场演示
  2:课堂代码
    1:侧边栏组件
    2:markdown 傻瓜式
    3:拖拽组件

  3:实现一个删除效果
    拖拽到某个点
    删除

  lrc 歌词解析  js库


2020年04月01日 星期三 天气 晴
  回顾:
    vue封装组件

    我们以前使用的UI组件 都是别人封装好的
    其实我们也可以自己封装组件
    最终生成属于自己的组件库
      侧边栏
      拖拽
      网格组件
    最终发布到 github变成开源 也可以npm发包 别人star 收获成就感
  封装组件的步骤
    小白:一头雾水
    大牛:逻辑缜密 思维清晰
        同时拥有大局观

    封装组件的目的: 于人于己都受用

    原则:
      1. 尽可能完美一些

      2. 开闭原则
        开: 开放一些接口
        闭: 别人不能修改的代码放在组件内部
        代码展示:
          开: 提供很一些组件暴露的属性和方法
            属性:通过v-slot暴露
            方法:通过回调的方式暴露
          闭: 具体的逻辑放在组件内部

      3. 代码逻辑
        需要的数据通过传参的形式传递过来  父传子
        外界想得到的结果通过回调的方式传递出去  子传父

      4. 最终: 高内聚 低耦合
    分享:第三组

  今天: 网格组件

  1:表格组件
    1:了解开闭原则
    2:闭中的功能放在组件内部
    3:数据可以通过传递的方式 传递过来
    4:样式 table 三角样式
    5:computed计算筛选
    6:vue中的filter


    <GridView
      :表头数据 ['name','price']
      :表的内容 [{name:'小红',price:100},{},{},{}]
    ></GridView>


    1:大概结构
    2:使用组件:
      1:局部注册
      2:全局注册

  封装组件的原则


  排序:
    点击某一个 点击事件(key)  key代表点击的是那一列

    // 正序 创建一个对象 {name:1,price:-1}  1:代表正序  -1代表倒序
    // 倒序

    //操作的数据 heroes
    //代码写在哪? computed
    //chai901018

2020年04月02日 星期四 天气晴

  回顾:
    组件的封装:
    表格组件:
      1:数据 --> 传值 父传子
      2:暴露 --> 回调
      3:功能点
        大众口味 : 比如搜索 比如排序

      较为完美的组件:参数特别多:可制定性特别高

    原则
      高内聚 低耦合
      内部功能 高内聚

      提供 --> 接口 以回调的方式  子传父
      获取 --> 传值 以props的方式


  今天:
    1:modal 模态组件 计算机+设计

      模态框组件  弹框组件

      通用性

    核心 思想
    问:怎么封装一个组件
    答:弹框组件(模态组件)
    问:怎么封装
    答:布局 按钮 点击 图层
    问:这个组件中包含以下几种之一
      列表
      输入框
      图片
    答:传值
      在组件里面判断 不超过4分

    正确的答案: slot

  1:布局 居中
  2:接收内容   slot 具名插槽
  3:点击确定和取消 事件
  4:动画 vue中自带的动画 transition v-enter  v-enter-active

  vue中的动画

    1) 想要动的元素 外层加 <transition name='anim'>
    2) 类

  2:项目 搭建 架构
    1:业务 考试平台
    2:接口

    3:权限
      1:管理员
      2:浏览者
      3:出题人

  3:作业:
    1:考试系统 分工
    2:UI框架 element-ui
    3:axios二次封装
    4:预习 vuex 二次封装
    5:树形组件
      1:双击 当前文件变成文件夹
      2:单机 是文件夹 就开打
      3:再次点击 合上
      4:点击底部+ 创建一个文件
      Vue.set('')//操作数组某一项
    6:模态框 完善
      3个模态框 1:中间内容 输入框   2:中间内容 列表 3:中间内容 图片


回顾:
  封装一个模态框
    封装什么组件
      1:接口
      2:传参

  1:slot 具名插槽
    组件: <slot name='header'>
    <div v-slot='header'>
      <h3 @click='add'></h3>
    </div>


  2:动画
    <transition name='modal'>
      div
    </transition>


   阶段:
    v-enter  opacity:0

    v-enter-active 开始动画

      过渡

    v-enter-to  opacity:0.5


    v-leave  opacity:0

    v-leave-active 开始动画

          过渡

    v-leave-to  opacity:0.5

  项目
    Vue+webpack+ajax+element-ui
    动手能力+解决问题能力+合作能力


  今天:组件

  作业:
    1:树状组件 扩展 + 添加一个文件
    2:考试平台 布局搭建 页面的搭建 插件的引入
    3:webpack打包查看体积 进行优化


2020年04月05日 天气 晴
  回顾:
    组件
    1. 干嘛
    2. 开闭原则 提供 获取
    3. 弹框
       逻辑 值怎么传  slot

这周:
  1:权限
    完美
      axios 二次封装
      vuex的二次封装
      router的二次封装

  面试问:
    1:搭建项目 (开放性问题)/ 权限问题是前端处理还是后端处理
    2:axios的封装  路由的封装 vuex的封装

    2:什么时候用回调
      开放性 : 0--10  7/8
      传递参数
        react  vue  子传父

      封装设计模式
        观察者模式

      高级一点的用法
        回调地狱
      手动封装一个co模块

      es6:promise  扁平化(链式调用)
      promise.then()

      异步 es7
      async await

      不要多用
      babel helper

      promise



    3:说一下盒模型  功底


    真正开发过程中
     权限 前端和后端一同处理
     过程控制:
     第一次登陆: 返回一个token 框架存起来  js-cookie
     获取角色: admin 路由拦截 根据角色动态添加路由到路由表
     渲染对用的路由 : router.addRoutes  2.2之后 api 存到vuex 好处: 响应式
     展示路由 动态设置路由



  vuex :
     1.下包
     2.配置  命名空间







  2:打包上线 极致的优化
    项目流程 维护
    服务器
    部署项目
    打包 极致的优化


权限:
  角色  ['admin']  ['admin','teacher']  ['viewer']
  1.路由拦截
    判断有没有token
    有:
      有没有权限
        有: next()
        没有: 请求权限 获取角色 ['admin']
        传递到仓库 : 在仓库中判断 加载哪些路由 存在来

    没有token
      验证白名单  user


2020年 4月 7日 星期二 天气 雪
  回顾:
    面试
    搭建项目

    权限
      1:权限处理的流程
        前端 :
          1)路由拦截
          2)有token
            有角色
              next
            没有角色
              发送请求 获取角色
              根据角色
                根据store
                获取路由信息

          3)没有token :
            验证白名单
            没有  跳转到登录页

       2:后端 : 根据token 生成对应角色


  今天:完善权限:
    1:生成token: 后台
    2:管理token  js-cookie : 有效期
    3:获取token 获取角色
      3.1 axios拦截
      3.2 角色 存到仓库
    4:过程 用户体验 nprogress
      Element-UI  Message


  代码步骤:
    1:搭建一个后台
      接收login 请求 接收参数  username  password
      返回 token
        token 有效期 前端和后端都要处理
    2:前端
      axios的拦截  utils/request
      发送请求     api/xxx.js
    3:存起来



  作业:
    权限敲完 搞明白
    加到项目中

2020年04月08日 星期三 天气雪
  1. 明天提问大牛答面试 四 和 十六


  今天:
    1. 项目上线 服务器
      1.服务器
        人生第一次租服务器
        免费15天 5块钱 30天

      2.域名(可有可无)  ip
      3.打包 cdn
        1)优化
        2)跨域(线上)  地址: /api ==> '/'
        3)服务器:静态资源的目录 html  css  js
        4)启动项目  地址:端口
        5)访问

    2. 访问我们的项目

2020年04月09日 星期四 天气晴
    1.提问
    第四题:
      如何解决vue组件通讯问题
      层次感
        大众都会的方法
        高级做法
      基础:子传父 父传子
      高级:
        小的项目
        发布订阅
        VueBus
        provider

        不太常用
          window window大佬 : 中性词
          cookie 同源 时效性
          全局Vue 承载逻辑的单元 A:对象 B:Vue实例 C:组件
        尤雨溪:
          面向函数式编程  Hook+ts   减少GC压力
          高阶组件  mixins
          不要把组件或者Vue实例当做承载逻辑的最小单元
    十六题: 如何解决移动端适配问题:
      通常: 百分比 + rem + 媒体查询
      高级:
        设计稿: 375 :二倍屏  750: 三倍屏
        1px  效果 2px  transform 缩放
        1像素


   今天:
    1:解决几个问题
    路由 + 权限

    1.路由拦截+权限问题
    2.部署到服务器
      刷新404
    3.优化  速度  公共的文件 抽离  cdn


  修改路由:
    1.重定向 到首页  原来 /login  --> /main-index
    2.白名单
    3.后台  字符串 --> 数组
    4.登录的时候 不应该存储角色  应该是 获取角色的时候存进去


    刷新404

2020年04月10日 星期五 天气 晴
  1. 前端如何处理权限
    1. token
    2. /login-->home
    3. 角色判断
    4. 根据角色 处理路由
    5. 存储到store

    6. 没有token
       处理白名单

  2. 移动端适配方案
    视口+ 媒体查询(pc+移动+平板端)

    移动端域名  m.baidu.com
    PC域名     www.baidu.com

    1. 单位 em rem
        区别 em  相对于元素本身的font-size 16==> 1rem = 10px
        区别 rem 相对根元素本身的font-size 16==> 1rem = 10px
    2. 阿里的flex-able 设计图 375 750
    3. 网易 基础body 7.5rem


  3. vue的传值
    父子传值  props
    子传父   $emit
    兄弟组件  vue-bus  发布订阅
    跨级     Vue-Bus 小型项目
    大型项目  vuex

    不常用:
      provider inject
      window
      vue组件实例 不建议 组件当成承载逻辑的最小单元 性能
      mixins 不建议 函数式编程 hooks

    面试:造火箭  破局
    开发:拧螺丝

    1:自信
    2:有条理 通用  高级
    3:不要冷场 转义  string  正则

  今天:
    1.昨天 优化 1s之内 带宽
      1)打包的优化 速度
        happypack 多线程 开启多线程 开启线程的时间 4-5s  公司 50s --> 25s
          1)不支持vue-loader
          2)小的项目 不要使用  30秒之内的不要用
          10s  13s
        dll

      2)体积的优化
        moment
        jquery
      3)加载速度  cdn


    2.自定义指令 应用场景


问题:
  为什么上线的时候需要一个node/express

  整个项目 拷贝到后台 npm run dev  开发环境

  打包 :js  css html  + node/express























